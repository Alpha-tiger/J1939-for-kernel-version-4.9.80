diff --git a/net/can/j1939/transport.c b/net/can/j1939/transport.c
index 58850da..0350bb2 100644
--- a/net/can/j1939/transport.c
+++ b/net/can/j1939/transport.c
@@ -684,6 +684,8 @@ static void j1939_xtp_rx_rts(struct net *net, struct sk_buff *skb, bool extd)
 	dat = skb->data;
 	pgn = j1939_xtp_ctl_to_pgn(dat);
 
+	pr_alert("Debugging - Function: %s Number: 1 \n",__func__);
+
 	if (dat[0] == J1939_TP_CMD_RTS && j1939_cb_is_broadcast(skcb)) {
 		pr_alert("%s: rts without destination (%i %02x)\n", __func__,
 			 skb->skb_iif, skcb->addr.sa);
@@ -694,19 +696,31 @@ static void j1939_xtp_rx_rts(struct net *net, struct sk_buff *skb, bool extd)
 	 * TP is pending in the other direction
 	 */
 	session = j1939_session_get_by_skb(net, j1939_sessionq(net, extd), skb, false);
-	if (session && !j1939_tp_im_transmitter(skb)) {
+	if (session && !j1939_tp_im_transmitter(skb))
+	{
+		pr_alert("Debugging - Function: %s Number: 2 \n",__func__);
+
 		/* RTS on pending connection */
 		j1939_session_cancel(net, session, J1939_ABORT_BUSY);
 		if (pgn != session->skcb->addr.pgn && dat[0] != J1939_TP_CMD_BAM)
+		{
+			pr_alert("Debugging - Function: %s Number: 3 \n",__func__);
 			j1939_xtp_tx_abort(skb, extd, 1, J1939_ABORT_BUSY, pgn);
+		}
 		j1939_session_put(session);
 		return;
-	} else if (!session && j1939_tp_im_transmitter(skb)) {
+	}
+	else if (!session && j1939_tp_im_transmitter(skb))
+	{
 		pr_alert("%s: I should tx (%i %02x %02x)\n", __func__,
 			 skb->skb_iif, skcb->addr.sa, skcb->addr.da);
 		return;
 	}
-	if (session && session->last_cmd != 0) {
+	pr_alert("Debugging - Function: %s Number: 4 \n",__func__);
+
+	if (session && session->last_cmd != 0)
+	{
+		pr_alert("Debugging - Function: %s Number: 5 \n",__func__);
 		/* we received a second rts on the same connection */
 		pr_alert("%s: connection exists (%i %02x %02x)\n", __func__,
 			 skb->skb_iif, skcb->addr.sa, skcb->addr.da);
@@ -714,47 +728,80 @@ static void j1939_xtp_rx_rts(struct net *net, struct sk_buff *skb, bool extd)
 		j1939_session_put(session);
 		return;
 	}
-	if (session) {
+	if (session)
+	{
+		pr_alert("Debugging - Function: %s Number: 6 \n",__func__);
 		/* make sure 'sa' & 'da' are correct !
 		 * They may be 'not filled in yet' for sending
 		 * skb's, since they did not pass the Address Claim ever.
 		 */
 		session->skcb->addr.sa = skcb->addr.sa;
 		session->skcb->addr.da = skcb->addr.da;
-	} else {
+	}
+	else
+	{
+		pr_alert("Debugging - Function: %s Number: 7 \n",__func__);
 		int abort = 0;
 
-		if (extd) {
+		if (extd)
+		{
+			pr_alert("Debugging - Function: %s Number: 8 \n",__func__);
 			len = j1939_etp_ctl_to_size(dat);
 			if (len > J1939_MAX_ETP_PACKET_SIZE)
+			{
+				pr_alert("Debugging - Function: %s Number: 9 \n",__func__);
 				abort = J1939_ABORT_FAULT;
+			}
 			else if (j1939_tp_max_packet_size && (len > j1939_tp_max_packet_size))
+			{
+				pr_alert("Debugging - Function: %s Number: 10 \n",__func__);
 				abort = J1939_ABORT_RESOURCE;
+			}
 			else if (len <= J1939_MAX_TP_PACKET_SIZE)
+			{
+				pr_alert("Debugging - Function: %s Number: 11 \n",__func__);
 				abort = J1939_ABORT_FAULT;
-		} else {
+			}
+		}
+		else
+		{
+			pr_alert("Debugging - Function: %s Number: 12 \n",__func__);
 			len = j1939_tp_ctl_to_size(dat);
 			if (len > J1939_MAX_TP_PACKET_SIZE)
+			{
+				pr_alert("Debugging - Function: %s Number: 13 \n",__func__);
 				abort = J1939_ABORT_FAULT;
+			}
 			else if (j1939_tp_max_packet_size && (len > j1939_tp_max_packet_size))
+			{
+				pr_alert("Debugging - Function: %s Number: 14 \n",__func__);
 				abort = J1939_ABORT_RESOURCE;
+			}
 		}
-		if (abort) {
+		pr_alert("Debugging - Function: %s Number: 15 \n",__func__);
+		if (abort)
+		{
+			pr_alert("Debugging - Function: %s Number: 16 \n",__func__);
 			j1939_xtp_tx_abort(skb, extd, 1, abort, pgn);
 			return;
 		}
 		session = j1939_session_fresh_new(len, skb, pgn);
-		if (!session) {
+		if (!session)
+		{
+			pr_alert("Debugging - Function: %s Number: 17 \n",__func__);
 			j1939_xtp_tx_abort(skb, extd, 1, J1939_ABORT_RESOURCE,
 					   pgn);
 			return;
 		}
+		pr_alert("Debugging - Function: %s Number: 18 \n",__func__);
 		session->extd = extd;
 
 		/* initialize the control buffer: plain copy */
 		session->pkt.total = (len + 6) / 7;
 		session->pkt.block = 0xff;
-		if (!extd) {
+		if (!extd)
+		{
+			pr_alert("Debugging - Function: %s Number: 19 \n",__func__);
 			if (dat[3] != session->pkt.total)
 				pr_alert("%s: strange total, %u != %u\n",
 					 __func__, session->pkt.total,
@@ -769,15 +816,22 @@ static void j1939_xtp_rx_rts(struct net *net, struct sk_buff *skb, bool extd)
 		list_add_tail(&session->list, j1939_sessionq(net, extd));
 		j1939_sessionlist_unlock(net);
 	}
+	pr_alert("Debugging - Function: %s Number: 20 \n",__func__);
 	session->last_cmd = dat[0];
 
 	j1939_tp_set_rxtimeout(session, 1250);
 
-	if (j1939_tp_im_receiver(session->skb)) {
+	if (j1939_tp_im_receiver(session->skb))
+	{
+		pr_alert("Debugging - Function: %s Number: 21 \n",__func__);
 		if (extd || dat[0] != J1939_TP_CMD_BAM)
+		{
+			pr_alert("Debugging - Function: %s Number: 22 \n",__func__);
 			j1939_session_schedule_txnow(session);
+		}
 	}
 
+	pr_alert("Debugging - Function: %s Number: 23 \n",__func__);
 	/* as soon as it's inserted, things can go fast
 	 * protect against a long delay
 	 * between spin_unlock & next statement
